#pragma checksum "C:\Users\sachi\source\repos\EdtechTest2\EdtechTest2\Areas\Instructor\Views\Course\Section.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4df8167c02bc15bd976ec3d49139e67062e48239"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Instructor_Views_Course_Section), @"mvc.1.0.view", @"/Areas/Instructor/Views/Course/Section.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\sachi\source\repos\EdtechTest2\EdtechTest2\Areas\Instructor\Views\_ViewImports.cshtml"
using EdtechTest2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\sachi\source\repos\EdtechTest2\EdtechTest2\Areas\Instructor\Views\_ViewImports.cshtml"
using EdtechTest2.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4df8167c02bc15bd976ec3d49139e67062e48239", @"/Areas/Instructor/Views/Course/Section.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"cf257dd57df6dd081cb2ef41bf2ed2aeb470eac6", @"/Areas/Instructor/Views/_ViewImports.cshtml")]
    public class Areas_Instructor_Views_Course_Section : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<EdtechTest2.Areas.Instructor.ViewModels.SectionViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-inline"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/section.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\sachi\source\repos\EdtechTest2\EdtechTest2\Areas\Instructor\Views\Course\Section.cshtml"
  
    ViewData["Title"] = "Section";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n\r\n\r\n    <div id=\"vue-app\">\r\n\r\n\r\n\r\n\r\n        <div class=\"jumbotron jumbotron-fluid\">\r\n            <div class=\"container\">\r\n                <h1 class=\"display-4\">");
#nullable restore
#line 16 "C:\Users\sachi\source\repos\EdtechTest2\EdtechTest2\Areas\Instructor\Views\Course\Section.cshtml"
                                 Write(Model.SectionName);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h1>\r\n                <p class=\"lead\">Section Id-{{sectionId=");
#nullable restore
#line 17 "C:\Users\sachi\source\repos\EdtechTest2\EdtechTest2\Areas\Instructor\Views\Course\Section.cshtml"
                                                  Write(Model.SectionId);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"}}</p>

            </div>


        </div>
        <button type=""button"" class=""btn btn-secondary btn-lg btn-block"">Add Lecture</button>
        <br />
        <div>
            <div class=""jumbotron jumbotron-fluid"">
                <div class=""container"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4df8167c02bc15bd976ec3d49139e67062e482395599", async() => {
                WriteLiteral(@"
                        <div class=""form-row align-items-center"">
                            <div class=""col-sm-3 my-1"">
                                <label class=""sr-only"" for=""inlineFormInputName"">Name</label>
                                <input type=""text"" class=""form-control"" id=""inlineFormInputName"" v-model=""AddlectureName"" placeholder=""Lecture Name"">
                            </div>


                        </div>
                    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <hr class=""my-4"">
                    <div class=""row"" align=""center"">

                        <div class=""container"">

                            <div class=""row"">


                                <div class=""col-sm-12"">
                                    <div class=""card"">
                                        <div class=""card-body"">
                                            <svg width=""5em"" height=""5em"" viewBox=""0 0 16 16"" class=""bi bi-film"" fill=""currentColor"" xmlns=""http://www.w3.org/2000/svg"">
                                                <path fill-rule=""evenodd"" d=""M0 1a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v14a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V1zm4 0h8v6H4V1zm8 8H4v6h8V9zM1 1h2v2H1V1zm2 3H1v2h2V4zM1 7h2v2H1V7zm2 3H1v2h2v-2zm-2 3h2v2H1v-2zM15 1h-2v2h2V1zm-2 3h2v2h-2V4zm2 3h-2v2h2V7zm-2 3h2v2h-2v-2zm2 3h-2v2h2v-2z"" />
                                            </svg>
                                            <br />                                            <br />
");
            WriteLiteral("\r\n                                            <p class=\"card-text\">Add Video Lecture</p>\r\n                                            <input type=\"file\" class=\"btn btn-secondary\" name=\"file\" v-on:change=\" SelectedLectureVideoFileUp\">\r\n\r\n");
            WriteLiteral(@"
                                        </div>

                                        <div v-if=""showLectureVideoUploadDetails"">
                                            <hr class=""my-4"">
                                            <div align=""center"" class=""container"">
                                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4df8167c02bc15bd976ec3d49139e67062e482399019", async() => {
                WriteLiteral(@"

                                                    <div class=""form-group mx-sm-3 mb-2"">
                                                        <input type=""text"" class=""form-control"" id=""videoLength"">
                                                    </div>
                                                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                <div v-if=""showUploading"">

                                                    <div class=""progress"">
                                                        <div class=""progress-bar progress-bar-striped"" role=""progressbar"" v-bind:style=""'width:' +progress+'%'"" aria-valuenow=""12"" aria-valuemin=""0"" aria-valuemax=""100""></div>
                                                    </div>

                                                </div>
                                            </div>
                                            <p class=""lead"">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>

                                        </div>


                                    </div>
                                </div>







                                <div class=""container"">

                                    <div class=""card-body"">

       ");
            WriteLiteral(@"                                 <div>
                                            <hr class=""my-4"">
                                            <div>
                                                <p class=""lead text-left"">Lecture Article</p>


                                                <textarea id=""lectureArticleId""></textarea>
                                            </div>
                                            <div>
                                                <hr class=""my-4"">
                                                <p class=""lead text-left"">Lecture Description</p>

                                                <textarea id=""lectureDescriptionId""></textarea>
                                            </div>
                                            <br />
                                            <hr class=""my-4"">
                                            <p class="" lead text-left"">Add Downlodable Contents</p>
                                          ");
            WriteLiteral(@"  <input type=""file"" class=""btn btn-outline-secondary"" name=""file"" v-on:change=""DownlodableContentFileUp"">
                                            <svg width=""1em"" height=""1em"" viewBox=""0 0 16 16"" class=""bi bi-plus"" fill=""currentColor"" xmlns=""http://www.w3.org/2000/svg"">
                                                <path fill-rule=""evenodd"" d=""M8 3.5a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5H4a.5.5 0 0 1 0-1h3.5V4a.5.5 0 0 1 .5-.5z"" />
                                                <path fill-rule=""evenodd"" d=""M7.5 8a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 0 1H8.5V12a.5.5 0 0 1-1 0V8z"" />
                                            </svg>&nbsp;Add Files
                                            </input>

                                            <hr class=""my-4"">

                                            <div v-if=""showArticleUploading"">
                                                <div class=""d-flex justify-content-center"">
                                                    <div class=""spinner-bo");
            WriteLiteral(@"rder"" role=""status"">
                                                        <span class=""sr-only"">Loading...</span>
                                                    </div>
                                                </div>
                                                <hr class=""my-4"">

                                            </div>


                                            <button type=""button"" v-on:click=""processAddLectureForm"" class=""btn btn-secondary btn-lg"">Add Lecture</button>

                                        </div>
                                    </div>

                                </div>




                            </div>






                        </div>


                    </div>

                </div>
            </div>
        </div>
        <hr class=""my-4"">

        <h2>Lectures </h2>

        <br />

        <div v-for=""(item,index) in lecturesList"">

            <div class=""card"">
                <div class=");
            WriteLiteral(@"""card-body"">
                    <h3>{{item.name}}</h3>
                    <hr class=""my-4"">
                       

                    <br />

                    <button type=""button"" v-on:click=""EditLecture(item.id)"" class=""btn btn-primary"">Edit Lecture</button>
                    <hr class=""my-4"">
                    <div v-if=""ToEditLectureId==item.id"">
                        <div class=""jumbotron jumbotron-fluid"">
                            <div class=""container"">
                                <h2>{{EditLectureobj.lectureName}}</h2>

                                <hr class=""my-4"">

                                <br />
                                <div v-if=""EditLectureobj.contentType==0"">
                                    <div class=""embed-responsive embed-responsive-16by9"">
                                        <iframe class=""embed-responsive-item"" v-bind:src=""EditLectureobj.video""></iframe>
                                    </div>

                           ");
            WriteLiteral(@"         <br />

                                    <input type=""file"" v-on:change=""EditLectureVideoFileUp"" class=""btn btn-primary btn-lg"">Change The Video </input>
                                    <br />

                                    <div v-if=""showEditedVideoDetails"">
                                        <br />
                                        <hr class=""my-4"">

                                        <div class=""input-group"">
                                            <div class=""input-group-prepend"">
                                                <span class=""input-group-text"">Video Length</span>
                                            </div>
                                            <input type=""text"" id=""EditvideoLengthId"" v-model=""EditedLectureVideoLength"" class=""form-control"">

                                        </div>

                                        <hr class=""my-4"">
                                        <br />

                        ");
            WriteLiteral(@"            </div>

                                    <br />

                                    <button type=""button"" v-on:click=""showEditAddArticleInsteadofVideofun"" class=""btn btn-secondary btn-lg"">Add Article Instead of The Video</button>
                                    <br />
                                    <div v-if=""showEditAddArticleInsteadofVideo"">
                                        <hr class=""my-4"">
                                        <p class=""lead"">Lecture Article(After Adding article instead of video  video would get deleted</p>

                                        <textarea id=""EditlectureArticleId"">{{EditLectureobj.article}}</textarea>


                                        <hr class=""my-4"">
                                    </div>

                                </div>

                                <div v-if=""EditLectureobj.contentType==2"">
                                    <hr class=""my-4"">
                                    <p class=""le");
            WriteLiteral(@"ad"">Lecture Article</p>
                                    <br />

                                    <br />
                                    <button type=""button"" v-on:click=""showEditAddVideoInsteadofArticle=!showEditAddVideoInsteadofArticle"" class=""btn btn-primary btn-lg"">Add Video Instead of the Article</button>
                                    <br />

                                    <div v-if=""showEditAddVideoInsteadofArticle"">
                                        <hr class=""my-4"">


                                        <input type=""file"" v-on:change=""EditLectureVideoFileUp"" class=""btn btn-secondary btn-lg btn-block""></input>
                                        <br />
                                        <div v-if=""showEditedVideoDetails"">
                                            <hr class=""my-4"">

                                            <div class=""input-group"">
                                                <div class=""input-group-prepend"">
            ");
            WriteLiteral(@"                                        <span class=""input-group-text"">Video Length</span>
                                                </div>
                                                <input type=""text"" id=""EditvideoLengthId"" v-model=""EditedLectureVideoLength"" class=""form-control"">

                                            </div>

                                            <hr class=""my-4"">


                                        </div>

                                        <br />

                                        <h6>After Adding this Article would be deleted </h6>


                                        <hr class=""my-4"">

                                    </div>
                                    <br />
                                    <br />
                                    <textarea id=""EditlectureArticleId"">{{EditLectureobj.article}}</textarea>
                                </div>


                                <hr class=""my-4"">
        ");
            WriteLiteral(@"                        <p class=""lead"">Lecture Description</p>

                                <textarea id=""EditlectureDescriptionId"">{{EditLectureobj.description}}</textarea>
                                <hr class=""my-4"">
                                <p class=""lead"">Downlodable Contents</p>
                                <br />
                                <div v-for=""(item,index) in EditLectureobj.downlodablecontents"">
                                    <h4 class=""lead"">
                                        {{item.name}} &nbsp;&nbsp;&nbsp;&nbsp;<a v-bind:href=""item.link"" target=""_blank"" class=""btn btn-secondary"" download>Open it</a>
                                        <button type=""button"" v-on:click=""deleteDownlodableContent(item.downlodableContentId)"" class=""btn btn-danger"">Delete</button>

                                    </h4>
                                    <br />


                                </div>
                                <hr class=""my-4"">
    ");
            WriteLiteral(@"                            <p class=""lead"">Add Downlodable Content</p>
                                <div v-if=""showLoaderEditAddingDownlodableContent"">
                                    <div class=""spinner-border"" role=""status"">
                                        <span class=""sr-only"">Loading...</span>
                                    </div>
                                </div>

                                <br />
                                <input type=""file"" v-on:change=""AddDownlodableContentFileUp"" class=""btn btn-secondary btn-lg btn-block"">
                                <br />
                                <br />
                                <br />
                                <button v-on:click=""AddDownlodableContent(item.id)"" class=""btn btn-primary btn-lg btn-block"">Add File </button>
                                <hr class=""my-4"">
                                <div v-if=""showSpinnerEditLecture"">
                                    <div class=""text-cen");
            WriteLiteral(@"ter"">
                                        <div class=""spinner-border"" role=""status"">
                                            <span class=""sr-only"">Loading...</span>
                                        </div>
                                    </div>
                                </div>
                                <br />
                                <br />
                                <div class=""row"">


                                    <button type=""button""  v-on:click=""DeleteLecture"" class=""btn btn-secondary btn-lg btn-block"">Delete </button>
                                    <button type=""button"" v-on:click=""SaveEditLectureData(item.id)"" class=""btn btn-secondary btn-lg btn-block"">Edit It</button>


                                </div>


                            </div>
                        </div>
                    </div>

                </div>
            </div>

            <br />
        </div>

        <hr class=""my-4"">


    </div>
");
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4df8167c02bc15bd976ec3d49139e67062e4823923714", async() => {
                    WriteLiteral("\r\n\r\n    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    <script>\r\n\r\n        tinymce.init({\r\n            selector: \'textarea\',\r\n            plugins: \'advlist autolink lists link  charmap print preview hr anchor pagebreak\',\r\n            toolbar_mode: \'floating\',\r\n        });\r\n    </script>\r\n\r\n");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<EdtechTest2.Areas.Instructor.ViewModels.SectionViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
